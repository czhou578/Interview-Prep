
Go vs Javascript
 - Go has two type of functions, normal and interface functions. 
 - Normal function in JS is similar to a Go function. JS class method is similar to an interface function
 - Go functions can return multiple values, which is not possible in JS under conventional circumstances.
 - GO functions cannot hold extra attributes.


 - Go closures that can reference context.

 - In switch statements, GO defaults to break after each clause, JS defaults to fall through. Fallthrough keyword in GO if want to Fallthrough

 - variables in same scope cannot be redeclared in GO (var in go is similar to let in js)
 - no while keyword in Go, when declaring while loops, use for. 
 - while, for each, for in, for of, are all achievable using for keyword in Go.


 - no ternary operator in Go
 - go spread operator only works in interface arrays or slices.
 - go is static typed vs js's dynamic typing, so go is faster in performance terms

 - Go functions have implicit returns.

 Functions can be curried in both languages, and can be named or anonymous. Functions can be assigned to variables as well.

Sources: https://deepu.tech/golang-for-javascript-developers-part-1/
  https://stackoverflow.com/questions/8588563/adding-custom-properties-to-a-function
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator
  https://zetcode.com/golang/interface/
  https://stackoverflow.com/questions/45239409/empty-return-in-func-with-return-value-in-golang

Speech Script  

Conditional rendering in JS vs Go
Type checking - forcing constraints of data types, prevent mismatching between operands in expression

static typed means checking for this at compile time, while dynamic means checking at runtime
spread syntax in JS, all elements in array or object needs to be included in a list

JS functions have their own properties and methods, can add custom properties.
var and let in JS; function vs block scoped.




